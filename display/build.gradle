def appMainClass = 'com.wy.Main'
apply plugin: 'java'
apply plugin: 'javafx-gradle-plugin'
apply plugin: 'scala'
// 生成启动脚本打包
//apply plugin: 'application'
//mainClassName = appMainClass

group 'org.example'

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala','src/main/java']
        }
        java {
            srcDirs = [ ]
        }
    }
}

repositories {
    mavenLocal()
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenCentral()
}
ext {
    scalaVersion = '2.12'
    sparkVersion = '3.0.0'
    jarName=''
}
dependencies {
    compile('mysql:mysql-connector-java:5.1.48')

    compile 'com.esotericsoftware:kryo-shaded:4.0.0'
    compile 'commons-codec:commons-codec:1.10'

    compile "org.apache.spark:spark-core_$scalaVersion:$sparkVersion-preview2"
    compile "org.apache.spark:spark-sql_$scalaVersion:$sparkVersion-preview2"
    compile  "org.apache.spark:spark-streaming_$scalaVersion:$sparkVersion-preview2"



    compile "org.scala-lang:scala-library:$scalaVersion"
    compile 'org.apache.poi:poi:3.17'
    compile 'org.apache.poi:poi-ooxml:3.17'
}
jar {
//后缀名
    archiveBaseName.set('LTPC')
    archiveAppendix.set('DAQ')
    archiveVersion.set('2.0')
    archiveClassifier.set('release')
    archiveExtension.set('jar')
    jarName="${archiveBaseName.get()}-${archiveAppendix.get()}-${archiveVersion.get()}-${archiveClassifier.get()}.${archiveExtension.get()}"
    manifest {
        attributes(
                "Manifest-Version": 1.0,
                "Main-Class": appMainClass,
                "Class-Path": configurations.compile.collect { "lib/${it.name}" }.join(' '))

    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(ScalaCompile) {
    options.encoding = "UTF-8"
}

task clearJar(type: Delete) {
    delete ("$buildDir\\libs\\lib")
    delete ("C:\\Users\\dgbtds\\Desktop\\LtpcExe\\MyApp\\lib")
    delete fileTree("$buildDir\\libs") {
        include '*.jar'
    }
    delete fileTree("C:\\Users\\dgbtds\\Desktop\\LtpcExe\\MyApp") {
        include '*.jar'
    }
}
//设置clear顺序优先
assemble.mustRunAfter clearJar
// 将依赖包复制到lib目录
task copyLib(type: Copy, dependsOn: 'clearJar') {
    from configurations.runtime
    into "$buildDir\\libs\\lib"
    into "C:\\Users\\dgbtds\\Desktop\\LtpcExe\\MyApp\\lib"
}
task copyJar(type: Copy, dependsOn: 'clearJar') {
    from("$buildDir\\libs\\$jarName")
    into "C:\\Users\\dgbtds\\Desktop\\LtpcExe\\MyApp"
}
task release(type: Copy, dependsOn: [clearJar,copyLib,copyJar,build])